#!/usr/bin/env bash
set -euo pipefail

file=$@
root=$(jq -r '.relationships[] | select(.relationshipType == "DESCRIBES") | .relatedSpdxElement' $file)

echo Found root: ${root}

# Packages of root
packages=$(jq -r '.relationships[] | select(.relationshipType == "PACKAGE_OF" and .relatedSpdxElement == "'${root}'") | .spdxElementId' $file)

json='[]'
for pkg in $packages; do
  component=$(jq -r '.packages[] | select(.SPDXID == "'$pkg'")' $file)
  homepage=$(echo "$component" | jq -r '.homepage')
  versionInfo=$(echo "$component" | jq -r '.versionInfo')
  if [ "${homepage}" != "null" ] && [ "${versionInfo}" != "null" ]; then
    generates_ref=$(jq -r '.relationships[] | select(.relationshipType == "GENERATES" and .relatedSpdxElement == "'$pkg'") | .spdxElementId' $file)
    if [ ! -z ${generates_ref} ]; then
      generates=$(jq -r '.packages[] | select(.SPDXID == "'$generates_ref'")' $file)
      download_location=$(echo "$generates" | jq -r '.downloadLocation')
      generates_homepage=$(echo "$generates" | jq -r '.homepage')
      generates_version=$(echo "$generates" | jq -r '.versionInfo')
      download_location="${download_location//openshift-priv/openshift}"
      echo "$homepage @ $versionInfo : $download_location : $generates_homepage : $generates_version"
      json=$(echo "$json" | jq \
        --arg image "$homepage" \
        --arg tag "$versionInfo" \
        --arg downloadLocation "$download_location" \
        --arg repoUrl "$generates_homepage" \
        --arg commitId "$generates_version" \
        '. + [{image: $image, tag: $tag, downloadLocation: $downloadLocation, repoUrl: $repoUrl, commitId: $commitId}]')
      # echo $json > $generates_version.json
    fi
  fi
done

echo "$json" > data.json